@extends('admin.layout')

@section('title', 'Advanced LMS Site Builder')

@push('styles')
    <!-- Summernote CSS -->
    <link href="{{ asset('vendor/summernote/summernote-bs5.min.css') }}" rel="stylesheet">
@endpush

@section('content')
<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-1 text-primary">
                        <i class="bi bi-layout-text-window me-2"></i>
                        Advanced Site Builder: {{ $tcLm->site_title }}
                    </h1>
                    <p class="text-muted mb-0">
                        Create professional educational content with our Microsoft Word-like editor
                    </p>
                </div>
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-outline-success" id="save-draft">
                        <i class="bi bi-save me-2"></i>
                        Save Draft
                    </button>
                    <a href="{{ route('admin.tc-lms.preview', $tcLm) }}" class="btn btn-outline-info" target="_blank">
                        <i class="bi bi-eye me-2"></i>
                        Preview
                    </a>
                    <a href="{{ route('admin.tc-lms.index') }}" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-2"></i>
                        Back to Sites
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Summernote Editor Interface -->
    <div class="editor-container">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <button type="button" class="btn btn-outline-primary" id="save-draft-toolbar">
                    <i class="bi bi-save me-2"></i>Save Draft
                </button>
                <a href="{{ route('admin.tc-lms.preview', $tcLm) }}" class="btn btn-outline-info ms-2" target="_blank">
                    <i class="bi bi-eye me-2"></i>Preview
                </a>
            </div>
            <div class="btn-group">
                <button type="button" class="btn btn-outline-secondary active" data-device="mobile">
                    <i class="bi bi-phone"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary" data-device="tablet">
                    <i class="bi bi-tablet"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary" data-device="desktop">
                    <i class="bi bi-laptop"></i>
                </button>
            </div>
        </div>

        <!-- Summernote Editor -->
        <div class="card border">
            <div class="card-body p-0">
                <textarea id="summernote-editor" class="form-control">{{ $tcLm->site_contents ?? '' }}</textarea>
            </div>
        </div>

        <!-- Media Library -->
        <div class="card border mt-4">
            <div class="card-header bg-light">
                <h6 class="card-title mb-0">
                    <i class="bi bi-images me-2"></i>
                    Media Library
                </h6>
            </div>
            <div class="card-body">
                <div class="d-flex gap-2 mb-3">
                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#imageUploadModal">
                        <i class="bi bi-cloud-upload me-2"></i>
                        Upload Image
                    </button>
                    <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#videoModal">
                        <i class="bi bi-play-circle me-2"></i>
                        Add Video
                    </button>
                </div>
                <div id="media-library" class="row g-2">
                    <div class="text-center text-muted py-3">
                        <i class="bi bi-folder2-open display-6"></i>
                        <p class="small mt-2">No media uploaded yet</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Upload Modal -->
<div class="modal fade" id="imageUploadModal" tabindex="-1" aria-labelledby="imageUploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="imageUploadModalLabel">Upload Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="imageUploadForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="imageFile" class="form-label">Select Image</label>
                        <input type="file" class="form-control" id="imageFile" accept="image/*" required>
                        <div class="form-text">Supported formats: JPEG, PNG, JPG, GIF, WebP (Max: 10MB)</div>
                    </div>
                    <div class="mb-3">
                        <label for="imageAltText" class="form-label">Alt Text</label>
                        <input type="text" class="form-control" id="imageAltText" placeholder="Describe the image for accessibility">
                    </div>
                    <div class="mb-3">
                        <label for="imageDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="imageDescription" rows="2" placeholder="Optional description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-upload me-2"></i>
                        Upload Image
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Video Modal -->
<div class="modal fade" id="videoModal" tabindex="-1" aria-labelledby="videoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="videoModalLabel">Add Video</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="videoForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="videoUrl" class="form-label">Video URL</label>
                        <input type="url" class="form-control" id="videoUrl" placeholder="https://www.youtube.com/watch?v=..." required>
                        <div class="form-text">Supported: YouTube, Vimeo, or direct video URLs</div>
                    </div>
                    <div class="mb-3">
                        <label for="videoTitle" class="form-label">Video Title</label>
                        <input type="text" class="form-control" id="videoTitle" placeholder="Enter video title">
                    </div>
                    <div class="mb-3">
                        <label for="videoDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="videoDescription" rows="2" placeholder="Optional description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-play-circle me-2"></i>
                        Add Video
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Hidden form for saving -->
<form id="save-form" method="POST" action="{{ route('admin.tc-lms.update', $tcLm) }}" style="display: none;">
    @csrf
    @method('PUT')
    <input type="hidden" name="site_contents" id="site-contents-input">
    <input type="hidden" name="site_title" value="{{ $tcLm->site_title }}">
    <input type="hidden" name="site_department" value="{{ $tcLm->site_department }}">
    <input type="hidden" name="site_description" value="{{ $tcLm->site_description }}">
</form>

@push('styles')
<style>
/* Summernote Customizations */
.note-editor.note-frame {
    border: 1px solid #dee2e6 !important;
    border-radius: 4px;
}

.note-editor.note-frame .note-statusbar {
    border-top: 1px solid #dee2e6;
    background-color: #f8f9fa;
}

.note-editor.note-frame .note-editing-area .note-editable {
    min-height: 400px;
    padding: 20px;
    font-family: 'Helvetica Neue', Arial, sans-serif;
    font-size: 16px;
    line-height: 1.6;
    color: #212529;
}

.note-editor .note-toolbar {
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    padding: 8px;
}

.note-editor .note-btn {
    border-color: #dee2e6;
    background-color: #fff;
    padding: 5px 10px;
}

.note-editor .note-btn:hover {
    background-color: #e9ecef;
    border-color: #ced4da;
}

.summernote-loading {
    padding: 10px;
    margin: 10px 0;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    color: #6c757d;
}

.components-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.component-item {
    padding: 12px;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: move;
    background: #f8f9fa;
    transition: all 0.2s ease;
    user-select: none;
}

.component-item:hover {
    background: #e9ecef;
    border-color: #007bff;
}

.component-item:active {
    transform: scale(0.98);
}

.canvas-container {
    min-height: 600px;
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    position: relative;
}

.canvas {
    min-height: 600px;
    padding: 20px;
    position: relative;
}

.canvas.dragover {
    border-color: #007bff;
    background: #e3f2fd;
}

.component {
    margin-bottom: 20px;
    border: 1px solid transparent;
    padding: 10px;
    border-radius: 6px;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
}

.component:hover {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.05);
}

.component.selected {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.1);
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.2);
}

.component .delete-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #dc3545;
    color: white;
    border: none;
    font-size: 12px;
    cursor: pointer;
    display: none;
    z-index: 10;
}

.component:hover .delete-btn {
    display: block;
}

.component .move-btn {
    position: absolute;
    top: -8px;
    left: -8px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #6c757d;
    color: white;
    border: none;
    font-size: 12px;
    cursor: move;
    display: none;
    z-index: 10;
}

.component:hover .move-btn {
    display: block;
}

/* Responsive canvas */
.canvas.mobile {
    max-width: 375px;
    margin: 0 auto;
}

.canvas.tablet {
    max-width: 768px;
    margin: 0 auto;
}

.canvas.desktop {
    max-width: 100%;
}

/* Rich text editor styles */
.rich-text {
    min-height: 50px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    padding: 8px;
    background: white;
}

.rich-text:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

/* Media library styles */
.media-item {
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 8px;
    margin-bottom: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.media-item:hover {
    border-color: #007bff;
    background: #f8f9fa;
}

.media-item img {
    width: 100%;
    height: 60px;
    object-fit: cover;
    border-radius: 4px;
}

.media-item .media-info {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 4px;
}

/* Formatting tools */
.formatting-tools {
    display: none;
}

.formatting-tools.active {
    display: block;
}

/* Welcome message */
.welcome-message {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px dashed #dee2e6;
    border-radius: 12px;
    margin: 20px;
}

.welcome-message.hidden {
    display: none;
}

/* Improved component styling */
.component {
    margin-bottom: 20px;
    border: 1px solid transparent;
    padding: 15px;
    border-radius: 8px;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.component:hover {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.05);
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.component.selected {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.1);
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.2);
}

/* Better rich text styling */
.rich-text {
    min-height: 40px;
    border: 1px solid transparent;
    border-radius: 4px;
    padding: 8px;
    background: transparent;
    transition: all 0.2s ease;
}

.rich-text:hover {
    border-color: #dee2e6;
    background: rgba(0,0,0,0.02);
}

.rich-text:focus {
    outline: none;
    border-color: #007bff;
    background: white;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

/* Placeholder styling */
.rich-text[data-placeholder]:empty:before {
    content: attr(data-placeholder);
    color: #6c757d;
    font-style: italic;
}

/* Component buttons */
.component .delete-btn {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: #dc3545;
    color: white;
    border: none;
    font-size: 14px;
    cursor: pointer;
    display: none;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.component:hover .delete-btn {
    display: flex;
    align-items: center;
    justify-content: center;
}

.component .move-btn {
    position: absolute;
    top: -8px;
    left: -8px;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: #6c757d;
    color: white;
    border: none;
    font-size: 14px;
    cursor: move;
    display: none;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.component:hover .move-btn {
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Media library improvements */
.media-item {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 10px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    background: white;
}

.media-item:hover {
    border-color: #007bff;
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.media-item img {
    width: 100%;
    height: 80px;
    object-fit: cover;
    border-radius: 6px;
}

.media-item .media-info {
    font-size: 0.85rem;
    color: #6c757d;
    margin-top: 6px;
}

.media-item .media-info .fw-bold {
    color: #495057;
    font-size: 0.9rem;
}

/* Dragging state */
body.dragging {
    cursor: grabbing;
}

body.dragging .canvas-container {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.1);
}

/* Component hover effects */
.component-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

/* Better button styling */
.btn-outline-primary {
    border-color: #007bff;
    color: #007bff;
    transition: all 0.2s ease;
}

.btn-outline-primary:hover {
    background-color: #007bff;
    border-color: #007bff;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
}

/* Modern Component Items */
.modern-component-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 15px 10px;
    border: 2px solid #e9ecef;
    border-radius: 12px;
    background: white;
    cursor: grab;
    transition: all 0.3s ease;
    text-align: center;
    min-height: 80px;
    justify-content: center;
}

.modern-component-item:hover {
    border-color: #007bff;
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);
}

.modern-component-item:active {
    cursor: grabbing;
    transform: scale(0.95);
}

.component-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 8px;
    color: white;
    font-size: 18px;
}

.component-label {
    font-size: 0.85rem;
    font-weight: 500;
    color: #495057;
}

/* Modern Canvas */
.modern-canvas-container {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-radius: 0 0 8px 8px;
    min-height: 600px;
    padding: 20px;
}

.modern-canvas {
    background: white;
    border-radius: 12px;
    min-height: 560px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
}

/* Welcome Message Improvements */
.welcome-icon {
    width: 80px;
    height: 80px;
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto;
    color: white;
    font-size: 2.5rem;
    box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3);
}

.welcome-buttons .btn {
    border-radius: 25px;
    padding: 12px 24px;
    font-weight: 500;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.welcome-buttons .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}

/* Gradient Headers */
.bg-gradient-primary {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%) !important;
}

.bg-gradient-success {
    background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%) !important;
}

.bg-gradient-info {
    background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%) !important;
}

.bg-gradient-warning {
    background: linear-gradient(135deg, #ffc107 0%, #e0a800 100%) !important;
}

.bg-gradient-danger {
    background: linear-gradient(135deg, #dc3545 0%, #c82333 100%) !important;
}

.bg-gradient-dark {
    background: linear-gradient(135deg, #343a40 0%, #23272b 100%) !important;
}

/* Modern Component Styling */
.modern-component {
    margin-bottom: 25px;
    border: 2px solid transparent;
    border-radius: 16px;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    overflow: hidden;
}

.modern-component:hover {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.02);
    box-shadow: 0 12px 40px rgba(0,0,0,0.15);
    transform: translateY(-4px);
}

.modern-component.selected {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.05);
    box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.2);
}

/* Component Controls */
.component-controls {
    position: absolute;
    top: -15px;
    right: -15px;
    display: none;
    gap: 5px;
    z-index: 20;
}

.modern-component:hover .component-controls {
    display: flex;
}

.control-btn {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
}

.control-btn:hover {
    transform: scale(1.1);
}

.control-btn.delete-btn {
    background: #dc3545;
    color: white;
}

.control-btn.delete-btn:hover {
    background: #c82333;
}

.control-btn.move-btn {
    background: #6c757d;
    color: white;
}

.control-btn.move-btn:hover {
    background: #5a6268;
}

.control-btn.copy-btn {
    background: #28a745;
    color: white;
}

.control-btn.copy-btn:hover {
    background: #218838;
}

/* Component Content */
.component-content {
    padding: 25px;
}

/* Enhanced Component Styling (Legacy) */
.component {
    margin-bottom: 20px;
    border: 2px solid transparent;
    padding: 20px;
    border-radius: 12px;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.component:hover {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.02);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    transform: translateY(-2px);
}

.component.selected {
    border-color: #007bff;
    background: rgba(0, 123, 255, 0.05);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.2);
}

/* Enhanced Component Buttons */
.component .delete-btn {
    position: absolute;
    top: -10px;
    right: -10px;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: #dc3545;
    color: white;
    border: none;
    font-size: 16px;
    cursor: pointer;
    display: none;
    z-index: 10;
    box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
    transition: all 0.2s ease;
}

.component .delete-btn:hover {
    background: #c82333;
    transform: scale(1.1);
}

.component:hover .delete-btn {
    display: flex;
    align-items: center;
    justify-content: center;
}

.component .move-btn {
    position: absolute;
    top: -10px;
    left: -10px;
    width: 28px;
    height: 28px;
    border-radius: 50%;
    background: #6c757d;
    color: white;
    border: none;
    font-size: 16px;
    cursor: move;
    display: none;
    z-index: 10;
    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
    transition: all 0.2s ease;
}

.component .move-btn:hover {
    background: #5a6268;
    transform: scale(1.1);
}

.component:hover .move-btn {
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Enhanced Rich Text */
.rich-text {
    min-height: 50px;
    border: 2px solid transparent;
    border-radius: 12px;
    padding: 15px;
    background: transparent;
    transition: all 0.2s ease;
    font-size: 16px;
    line-height: 1.6;
    position: relative;
}

.rich-text:hover {
    border-color: #dee2e6;
    background: rgba(0,0,0,0.02);
}

.rich-text:focus {
    outline: none;
    border-color: #007bff;
    background: white;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
}

/* Specific Text Types */
.heading-text {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
    margin: 0;
    line-height: 1.3;
}

.heading-text:hover {
    color: #007bff;
}

.paragraph-text {
    font-size: 16px;
    color: #495057;
    margin: 0;
    line-height: 1.7;
}

.list-text {
    font-size: 16px;
    color: #495057;
    margin: 0;
    padding-left: 20px;
}

.list-text li {
    margin-bottom: 8px;
    line-height: 1.6;
}

.list-text li:hover {
    color: #007bff;
    transform: translateX(5px);
    transition: all 0.2s ease;
}

/* Professional Editor Layout */
.editor-container {
    background: #f8f9fa;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}

/* Editor Toolbar */
.editor-toolbar {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-bottom: none;
    padding: 8px 10px;
    display: flex;
    justify-content: flex-start;
    align-items: center;
    flex-wrap: wrap;
    gap: 5px;
    border-radius: 4px 4px 0 0;
}

.toolbar-section {
    display: flex;
    align-items: center;
    gap: 15px;
}

.toolbar-group {
    display: flex;
    align-items: center;
    gap: 5px;
}

.toolbar-separator {
    width: 1px;
    height: 24px;
    background: #dee2e6;
    margin: 0 10px;
}

.toolbar-btn {
    width: 32px;
    height: 32px;
    border: 1px solid #dee2e6;
    background: white;
    border-radius: 3px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #495057;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    margin: 0 2px;
}

.toolbar-btn:hover {
    background: #f0f0f0;
    color: #212529;
    border-color: #ced4da;
}

.toolbar-btn:active {
    transform: translateY(0);
}

/* Editor Canvas Container */
.editor-canvas-container {
    background: #ffffff;
    min-height: 600px;
    border: 1px solid #dee2e6;
    border-top: none;
    border-radius: 0 0 4px 4px;
}

/* Modern Canvas */
.modern-canvas-container {
    background: #ffffff;
    min-height: 600px;
    padding: 0;
}

.modern-canvas {
    background: white;
    min-height: 560px;
    position: relative;
    overflow: hidden;
    padding: 20px;
    border: none;
}

/* Properties Panel */
.properties-panel {
    position: absolute;
    top: 0;
    right: 0;
    width: 280px;
    background: white;
    box-shadow: -2px 0 5px rgba(0,0,0,0.05);
    z-index: 100;
    border-left: 1px solid #dee2e6;
    height: 100%;
    display: block;
}

.properties-header {
    padding: 10px 15px;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
}

.properties-content {
    padding: 15px;
    height: calc(100% - 43px);
    overflow-y: auto;
}

/* Responsive Design */
@media (max-width: 768px) {
    .editor-toolbar {
        padding: 10px 15px;
        flex-direction: column;
        align-items: stretch;
    }
    
    .toolbar-section {
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .properties-panel {
        position: fixed;
        top: 0;
        right: 0;
        left: 0;
        bottom: 0;
        width: 100%;
        transform: none;
        border-radius: 0;
    }
    
    .modern-canvas {
        padding: 20px;
    }
}

/* Instructions styling */
.instructions {
    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
    border-left: 4px solid #007bff;
    padding: 15px;
    margin: 20px 0;
    border-radius: 0 8px 8px 0;
}

.instructions h6 {
    color: #007bff;
    margin-bottom: 10px;
}

.instructions ul {
    margin-bottom: 0;
}

.instructions li {
    margin-bottom: 5px;
    color: #495057;
}
</style>
@endpush

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize Summernote
    initSummernoteEditor('#summernote-editor');
    
    // Load media library
    loadMediaLibrary();
    
    // Save button functionality
    document.getElementById('save-draft-toolbar').addEventListener('click', function() {
        saveSite();
    });
    
    // Device view buttons
    document.querySelectorAll('[data-device]').forEach(button => {
        button.addEventListener('click', function() {
            const device = this.getAttribute('data-device');
            setDeviceView(device);
            
            // Update active state
            document.querySelectorAll('[data-device]').forEach(btn => {
                btn.classList.remove('active');
            });
            this.classList.add('active');
        });
    });
});

function initializeAdvancedBuilder() {
    const canvas = document.getElementById('canvas');
    const components = document.querySelectorAll('.component-item');
    
    // Make components draggable
    components.forEach(component => {
        component.addEventListener('dragstart', handleDragStart);
    });
    
    // Make canvas a drop zone
    canvas.addEventListener('dragover', handleDragOver);
    canvas.addEventListener('drop', handleDrop);
    canvas.addEventListener('dragleave', handleDragLeave);
    
    // Initialize other functionality
    initializeViewButtons();
    initializeActionButtons();
    initializeFormattingTools();
    initializeModals();
}

function handleDragStart(e) {
    e.dataTransfer.setData('text/plain', e.target.dataset.component);
    e.target.style.opacity = '0.5';
}

function handleDragOver(e) {
    e.preventDefault();
    e.currentTarget.classList.add('dragover');
}

function handleDragLeave(e) {
    e.currentTarget.classList.remove('dragover');
}

function handleDrop(e) {
    e.preventDefault();
    e.currentTarget.classList.remove('dragover');
    
    const componentType = e.dataTransfer.getData('text/plain');
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    addComponent(componentType, x, y);
}

function addComponent(type, x, y) {
    const canvas = document.getElementById('canvas');
    const componentId = 'component_' + Date.now();
    
    // Hide welcome message if it exists
    const welcomeMessage = document.querySelector('.welcome-message');
    if (welcomeMessage) {
        welcomeMessage.classList.add('hidden');
    }
    
    let componentHtml = '';
    let componentData = {
        id: componentId,
        type: type,
        x: x,
        y: y,
        content: '',
        styles: {
            fontSize: '16px',
            color: '#000000',
            backgroundColor: '#ffffff',
            textAlign: 'left',
            padding: '10px'
        }
    };
    
    switch(type) {
        case 'heading':
            componentHtml = `
                <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <div class="component-controls">
                        <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                            <i class="bi bi-grip-vertical"></i>
                        </button>
                        <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                            <i class="bi bi-files"></i>
                        </button>
                    </div>
                    <div class="component-content">
                        <h2 class="rich-text heading-text" contenteditable="true" data-placeholder="Click to edit heading">Click to edit heading</h2>
                    </div>
                </div>
            `;
            componentData.content = 'Click to edit heading';
            break;
        case 'paragraph':
            componentHtml = `
                <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <div class="component-controls">
                        <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                            <i class="bi bi-grip-vertical"></i>
                        </button>
                        <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                            <i class="bi bi-files"></i>
                        </button>
                    </div>
                    <div class="component-content">
                        <p class="rich-text paragraph-text" contenteditable="true" data-placeholder="Click to edit paragraph text">Click to edit paragraph text. You can type anything you want here.</p>
                    </div>
                </div>
            `;
            componentData.content = 'Click to edit paragraph text. You can type anything you want here.';
            break;
        case 'list':
            componentHtml = `
                <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <div class="component-controls">
                        <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                            <i class="bi bi-grip-vertical"></i>
                        </button>
                        <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                            <i class="bi bi-files"></i>
                        </button>
                    </div>
                    <div class="component-content">
                        <ul class="rich-text list-text" contenteditable="true" data-placeholder="Click to edit list">
                            <li>Course objective 1</li>
                            <li>Course objective 2</li>
                            <li>Course objective 3</li>
                        </ul>
                    </div>
                </div>
            `;
            componentData.content = 'Course objective 1\nCourse objective 2\nCourse objective 3';
            break;
        case 'image':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <div class="text-center p-4 border" style="min-height: 100px;">
                        <i class="bi bi-image display-4 text-muted"></i>
                        <p class="text-muted mt-2">Click to select image</p>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="selectImage('${componentId}')">
                            Select Image
                        </button>
                    </div>
                </div>
            `;
            break;
        case 'video':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <div class="text-center p-4 border" style="min-height: 100px;">
                        <i class="bi bi-play-circle display-4 text-muted"></i>
                        <p class="text-muted mt-2">Click to add video</p>
                        <button type="button" class="btn btn-sm btn-outline-success" onclick="addVideo('${componentId}')">
                            Add Video
                        </button>
                    </div>
                </div>
            `;
            break;
        case 'button':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <button class="btn btn-primary rich-text" contenteditable="true" data-placeholder="Button Text">Button Text</button>
                </div>
            `;
            componentData.content = 'Button Text';
            break;
        case 'card':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title rich-text" contenteditable="true" data-placeholder="Card Title">Card Title</h5>
                            <p class="card-text rich-text" contenteditable="true" data-placeholder="Card content">Card content</p>
                        </div>
                    </div>
                </div>
            `;
            break;
        case 'spacer':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <div style="height: 50px; background: #f8f9fa; border: 1px dashed #dee2e6;"></div>
                </div>
            `;
            break;
        case 'divider':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <hr style="border-top: 2px solid #dee2e6;">
                </div>
            `;
            break;
        case 'quote':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <blockquote class="blockquote">
                        <p class="rich-text" contenteditable="true" data-placeholder="Enter quote text">Enter quote text</p>
                        <footer class="blockquote-footer">
                            <cite class="rich-text" contenteditable="true" data-placeholder="Author name">Author name</cite>
                        </footer>
                    </blockquote>
                </div>
            `;
            break;
    }
    
    canvas.insertAdjacentHTML('beforeend', componentHtml);
    
    // Store component data
    window.siteComponents = window.siteComponents || {};
    window.siteComponents[componentId] = componentData;
    
    // Select the new component
    selectComponent(componentId);
}

function selectComponent(componentId) {
    // Remove previous selection
    document.querySelectorAll('.component.selected, .modern-component.selected').forEach(el => {
        el.classList.remove('selected');
    });
    
    // Select current component
    const component = document.querySelector(`[data-id="${componentId}"]`);
    if (component) {
        component.classList.add('selected');
        showProperties(componentId);
        showFormattingTools();
        showPropertiesPanel();
    }
}

function deleteComponent(componentId) {
    const component = document.querySelector(`[data-id="${componentId}"]`);
    if (component) {
        component.remove();
        delete window.siteComponents[componentId];
        hideFormattingTools();
    }
}

function duplicateComponent(componentId) {
    const originalComponent = window.siteComponents[componentId];
    if (originalComponent) {
        const canvas = document.getElementById('canvas');
        const canvasRect = canvas.getBoundingClientRect();
        
        // Create new component with same data
        addComponent(originalComponent.type, canvasRect.width / 2, canvasRect.height / 2);
        
        showAlert('Component duplicated successfully!', 'success');
    }
}

// Properties panel functions
function togglePropertiesPanel() {
    const panel = document.getElementById('properties-panel');
    panel.classList.toggle('show');
}

function showPropertiesPanel() {
    const panel = document.getElementById('properties-panel');
    panel.classList.add('show');
}

function hidePropertiesPanel() {
    const panel = document.getElementById('properties-panel');
    panel.classList.remove('show');
}

// Connect toolbar save button
document.addEventListener('DOMContentLoaded', function() {
    const toolbarSaveBtn = document.getElementById('save-draft-toolbar');
    const mainSaveBtn = document.getElementById('save-draft');
    
    if (toolbarSaveBtn && mainSaveBtn) {
        toolbarSaveBtn.addEventListener('click', function() {
            mainSaveBtn.click();
        });
    }
});

function showProperties(componentId) {
    const component = window.siteComponents[componentId];
    if (!component) return;
    
    const propertiesPanel = document.getElementById('properties-panel');
    
    let propertiesHtml = `
        <h6>Properties</h6>
        <div class="mb-3">
            <label class="form-label">Component Type</label>
            <input type="text" class="form-control form-control-sm" value="${component.type}" readonly>
        </div>
    `;
    
    // Add specific properties based on component type
    switch(component.type) {
        case 'heading':
            propertiesHtml += `
                <div class="mb-3">
                    <label class="form-label">Heading Level</label>
                    <select class="form-select form-select-sm" id="heading-level-${componentId}" onchange="updateComponent('${componentId}')">
                        <option value="h1">H1</option>
                        <option value="h2" selected>H2</option>
                        <option value="h3">H3</option>
                        <option value="h4">H4</option>
                        <option value="h5">H5</option>
                        <option value="h6">H6</option>
                    </select>
                </div>
            `;
            break;
        case 'image':
            propertiesHtml += `
                <div class="mb-3">
                    <label class="form-label">Image Source</label>
                    <div class="input-group input-group-sm">
                        <input type="text" class="form-control" id="image-src-${componentId}" placeholder="Image URL">
                        <button class="btn btn-outline-secondary" type="button" onclick="selectImage('${componentId}')">
                            <i class="bi bi-image"></i>
                        </button>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Alt Text</label>
                    <input type="text" class="form-control form-control-sm" id="image-alt-${componentId}" placeholder="Alt text">
                </div>
            `;
            break;
        case 'video':
            propertiesHtml += `
                <div class="mb-3">
                    <label class="form-label">Video URL</label>
                    <div class="input-group input-group-sm">
                        <input type="url" class="form-control" id="video-url-${componentId}" placeholder="Video URL">
                        <button class="btn btn-outline-secondary" type="button" onclick="addVideo('${componentId}')">
                            <i class="bi bi-play-circle"></i>
                        </button>
                    </div>
                </div>
            `;
            break;
    }
    
    propertiesPanel.innerHTML = propertiesHtml;
}

function showFormattingTools() {
    document.getElementById('formatting-tools').style.display = 'block';
}

function hideFormattingTools() {
    document.getElementById('formatting-tools').style.display = 'none';
}

function initializeFormattingTools() {
    // Font size
    document.getElementById('font-size').addEventListener('change', function() {
        const selectedComponent = document.querySelector('.component.selected');
        if (selectedComponent) {
            const componentId = selectedComponent.dataset.id;
            updateComponentStyle(componentId, 'fontSize', this.value);
        }
    });
    
    // Text color
    document.getElementById('text-color').addEventListener('change', function() {
        const selectedComponent = document.querySelector('.component.selected');
        if (selectedComponent) {
            const componentId = selectedComponent.dataset.id;
            updateComponentStyle(componentId, 'color', this.value);
        }
    });
    
    // Background color
    document.getElementById('bg-color').addEventListener('change', function() {
        const selectedComponent = document.querySelector('.component.selected');
        if (selectedComponent) {
            const componentId = selectedComponent.dataset.id;
            updateComponentStyle(componentId, 'backgroundColor', this.value);
        }
    });
    
    // Text alignment
    document.querySelectorAll('[data-align]').forEach(btn => {
        btn.addEventListener('click', function() {
            const selectedComponent = document.querySelector('.component.selected');
            if (selectedComponent) {
                const componentId = selectedComponent.dataset.id;
                updateComponentStyle(componentId, 'textAlign', this.dataset.align);
            }
        });
    });
    
    // Padding
    document.getElementById('padding').addEventListener('input', function() {
        const selectedComponent = document.querySelector('.component.selected');
        if (selectedComponent) {
            const componentId = selectedComponent.dataset.id;
            updateComponentStyle(componentId, 'padding', this.value + 'px');
        }
        document.getElementById('padding-value').textContent = this.value + 'px';
    });
}

function updateComponentStyle(componentId, property, value) {
    const component = document.querySelector(`[data-id="${componentId}"]`);
    if (component) {
        const editableElement = component.querySelector('.rich-text');
        if (editableElement) {
            editableElement.style[property] = value;
        }
        
        // Update component data
        if (window.siteComponents[componentId]) {
            window.siteComponents[componentId].styles[property] = value;
        }
    }
}

function initializeViewButtons() {
    document.getElementById('mobile-view').addEventListener('click', () => {
        document.getElementById('canvas').className = 'canvas mobile';
        updateActiveViewButton('mobile-view');
    });
    
    document.getElementById('tablet-view').addEventListener('click', () => {
        document.getElementById('canvas').className = 'canvas tablet';
        updateActiveViewButton('tablet-view');
    });
    
    document.getElementById('desktop-view').addEventListener('click', () => {
        document.getElementById('canvas').className = 'canvas desktop';
        updateActiveViewButton('desktop-view');
    });
}

function updateActiveViewButton(activeId) {
    document.querySelectorAll('#mobile-view, #tablet-view, #desktop-view').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-outline-secondary');
    });
    
    document.getElementById(activeId).classList.remove('btn-outline-secondary');
    document.getElementById(activeId).classList.add('btn-primary');
}

function initializeActionButtons() {
    document.getElementById('save-draft').addEventListener('click', saveSite);
}

function initializeModals() {
    // Image upload form
    document.getElementById('imageUploadForm').addEventListener('submit', function(e) {
        e.preventDefault();
        uploadImage();
    });
    
    // Video form
    document.getElementById('videoForm').addEventListener('submit', function(e) {
        e.preventDefault();
        addVideoFromModal();
    });
}

function uploadImage() {
    const formData = new FormData();
    const imageFile = document.getElementById('imageFile').files[0];
    const altText = document.getElementById('imageAltText').value;
    const description = document.getElementById('imageDescription').value;
    
    if (!imageFile) {
        showAlert('Please select an image file', 'warning');
        return;
    }
    
    // Add progress bar to modal if it doesn't exist
    let progressContainer = document.querySelector('#imageUploadModal .upload-progress-container');
    if (!progressContainer) {
        progressContainer = document.createElement('div');
        progressContainer.className = 'upload-progress-container mb-3';
        progressContainer.innerHTML = `
            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
            </div>
            <small class="text-muted mt-1 d-block">Uploading image...</small>
        `;
        document.querySelector('#imageUploadModal .modal-body').insertBefore(
            progressContainer, 
            document.querySelector('#imageUploadModal .modal-body').firstChild
        );
    } else {
        progressContainer.style.display = 'block';
    }
    
    const progressBar = progressContainer.querySelector('.progress-bar');
    progressBar.style.width = '0%';
    
    formData.append('image', imageFile);
    formData.append('alt_text', altText);
    formData.append('description', description);
    
    // Use XMLHttpRequest for progress tracking
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '{{ route("admin.tc-lms.upload-image", $tcLm) }}', true);
    
    // Add CSRF token
    xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));
    
    // Track upload progress
    xhr.upload.onprogress = function(e) {
        if (e.lengthComputable) {
            const percentComplete = Math.round((e.loaded / e.total) * 100);
            progressBar.style.width = percentComplete + '%';
            progressBar.textContent = percentComplete + '%';
        }
    };
    
    // Handle response
    xhr.onload = function() {
        if (xhr.status === 200) {
            try {
                const data = JSON.parse(xhr.responseText);
                if (data.success) {
                    // Close modal
                    bootstrap.Modal.getInstance(document.getElementById('imageUploadModal')).hide();
                    
                    // Reset form
                    document.getElementById('imageUploadForm').reset();
                    
                    // Hide progress bar
                    progressContainer.style.display = 'none';
                    
                    // Reload media library
                    loadMediaLibrary();
                    
                    // Show success message
                    showAlert('Image uploaded successfully!', 'success');
                } else {
                    progressContainer.style.display = 'none';
                    showAlert('Failed to upload image: ' + data.message, 'danger');
                }
            } catch (error) {
                progressContainer.style.display = 'none';
                console.error('Error:', error);
                showAlert('Error processing server response', 'danger');
            }
        } else {
            progressContainer.style.display = 'none';
            showAlert('Server error: ' + xhr.status, 'danger');
        }
    };
    
    xhr.onerror = function() {
        progressContainer.style.display = 'none';
        showAlert('Network error occurred', 'danger');
    };
    
    xhr.send(formData);
}

function addVideoFromModal() {
    const videoUrl = document.getElementById('videoUrl').value;
    const title = document.getElementById('videoTitle').value;
    const description = document.getElementById('videoDescription').value;
    
    if (!videoUrl) {
        alert('Please enter a video URL');
        return;
    }
    
    fetch('{{ route("admin.tc-lms.add-video", $tcLm) }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
            video_url: videoUrl,
            title: title,
            description: description
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Close modal
            bootstrap.Modal.getInstance(document.getElementById('videoModal')).hide();
            
            // Reset form
            document.getElementById('videoForm').reset();
            
            // Reload media library
            loadMediaLibrary();
            
            // Show success message
            showAlert('Video added successfully!', 'success');
        } else {
            showAlert('Failed to add video: ' + data.message, 'danger');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while adding the video', 'danger');
    });
}

function loadMediaLibrary() {
    fetch('{{ route("admin.tc-lms.get-media", $tcLm) }}')
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const mediaLibrary = document.getElementById('media-library');
            if (data.media.length > 0) {
                mediaLibrary.innerHTML = data.media.map(media => `
                    <div class="media-item" onclick="insertMedia('${media.id}', '${media.type}', '${media.url}')">
                        ${media.type === 'image' ? 
                            `<img src="${media.url}" alt="${media.alt_text}">` : 
                            `<div class="text-center p-2"><i class="bi bi-play-circle display-4 text-success"></i></div>`
                        }
                        <div class="media-info">
                            <div class="fw-bold">${media.file_name}</div>
                            <div>${media.type} • ${media.file_size}</div>
                        </div>
                    </div>
                `).join('');
            } else {
                mediaLibrary.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="bi bi-images"></i>
                        <p class="small">No media uploaded yet</p>
                    </div>
                `;
            }
        }
    })
    .catch(error => {
        console.error('Error loading media:', error);
        document.getElementById('media-library').innerHTML = `
            <div class="text-center text-danger">
                <i class="bi bi-exclamation-triangle"></i>
                <p class="small">Error loading media</p>
            </div>
        `;
    });
}

function insertMedia(mediaId, mediaType, mediaUrl) {
    const selectedComponent = document.querySelector('.component.selected');
    if (!selectedComponent) {
        showAlert('Please select a component first', 'warning');
        return;
    }
    
    const componentId = selectedComponent.dataset.id;
    const component = window.siteComponents[componentId];
    
    if (component && component.type === 'image') {
        const imageElement = selectedComponent.querySelector('img') || selectedComponent.querySelector('div');
        if (imageElement) {
            if (mediaType === 'image') {
                imageElement.innerHTML = `<img src="${mediaUrl}" alt="Uploaded image" style="max-width: 100%; height: auto;">`;
            } else {
                showAlert('Please select an image for this component', 'warning');
                return;
            }
        }
    } else if (component && component.type === 'video') {
        const videoElement = selectedComponent.querySelector('div');
        if (videoElement) {
            if (mediaType === 'video') {
                videoElement.innerHTML = `<iframe width="100%" height="315" src="${mediaUrl}" frameborder="0" allowfullscreen></iframe>`;
            } else {
                showAlert('Please select a video for this component', 'warning');
                return;
            }
        }
    }
    
    showAlert('Media inserted successfully!', 'success');
}

function selectImage(componentId) {
    const modal = new bootstrap.Modal(document.getElementById('imageUploadModal'));
    modal.show();
}

function addVideo(componentId) {
    const modal = new bootstrap.Modal(document.getElementById('videoModal'));
    modal.show();
}

function saveSite() {
    const content = $('#summernote-editor').summernote('code');
    document.getElementById('site-contents-input').value = content;
    document.getElementById('save-form').submit();
}

function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.parentNode.removeChild(alertDiv);
        }
    }, 5000);
}

function setDeviceView(device) {
    const editorContainer = document.querySelector('.card:has(#summernote-editor)');
    
    if (!editorContainer) return;
    
    switch(device) {
        case 'mobile':
            editorContainer.style.maxWidth = '375px';
            editorContainer.style.margin = '0 auto';
            break;
        case 'tablet':
            editorContainer.style.maxWidth = '768px';
            editorContainer.style.margin = '0 auto';
            break;
        case 'desktop':
            editorContainer.style.maxWidth = '100%';
            editorContainer.style.margin = '0';
            break;
    }
}

function loadExistingContent(content) {
    if (content && typeof content === 'object') {
        window.siteComponents = content;
        
        // Recreate components from saved data
        Object.values(content).forEach(componentData => {
            addComponentFromData(componentData);
        });
    }
}

function addComponentFromData(componentData) {
    const canvas = document.getElementById('canvas');
    const componentId = componentData.id;
    
    // Hide welcome message
    const welcomeMessage = document.querySelector('.welcome-message');
    if (welcomeMessage) {
        welcomeMessage.classList.add('hidden');
    }
    
    // Restore component data
    window.siteComponents[componentId] = componentData;
    
    // Recreate DOM element based on type
    let componentHtml = '';
    
    switch(componentData.type) {
        case 'heading':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <h2 class="rich-text" contenteditable="true">${componentData.content}</h2>
                </div>
            `;
            break;
        case 'paragraph':
            componentHtml = `
                <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                    <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                    <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                    <p class="rich-text" contenteditable="true">${componentData.content}</p>
                </div>
            `;
            break;
        // Add other component types as needed
    }
    
    canvas.insertAdjacentHTML('beforeend', componentHtml);
}

// Quick component addition function
function addQuickComponent(type) {
    const canvas = document.getElementById('canvas');
    const canvasRect = canvas.getBoundingClientRect();
    
    // Add component at center of canvas
    addComponent(type, canvasRect.width / 2, canvasRect.height / 2);
    
    // Show success message
    showAlert(`${type.charAt(0).toUpperCase() + type.slice(1)} added successfully! Click on it to edit.`, 'success');
}

// Improved drag and drop with visual feedback
function handleDragStart(e) {
    e.dataTransfer.setData('text/plain', e.target.dataset.component);
    e.target.style.opacity = '0.5';
    
    // Add visual feedback
    document.body.classList.add('dragging');
}

function handleDragEnd(e) {
    e.target.style.opacity = '1';
    document.body.classList.remove('dragging');
}

// Add drag end event to all draggable components
document.addEventListener('DOMContentLoaded', function() {
    const components = document.querySelectorAll('.component-item');
    components.forEach(component => {
        component.addEventListener('dragend', handleDragEnd);
    });
});

// Demo content function
function addDemoContent() {
    const canvas = document.getElementById('canvas');
    const welcomeMessage = document.querySelector('.welcome-message');
    if (welcomeMessage) {
        welcomeMessage.classList.add('hidden');
    }
    
    // Add demo components
    const demoComponents = [
        { type: 'heading', content: 'Welcome to Our Course' },
        { type: 'paragraph', content: 'This is a sample paragraph. You can edit this text by clicking on it and typing your own content. The formatting tools on the right will help you style your text.' },
        { type: 'heading', content: 'Course Objectives' },
        { type: 'list', content: 'Learn new concepts\nUnderstand key principles\nApply knowledge practically\nComplete assignments' },
        { type: 'paragraph', content: 'This is another paragraph. You can add as many elements as you need to create your educational content.' },
        { type: 'card', content: 'Important Note: This is a sample card. You can edit the title and content to add important information for your students.' }
    ];
    
    demoComponents.forEach((demo, index) => {
        setTimeout(() => {
            const componentId = 'component_' + Date.now() + '_' + index;
            const componentData = {
                id: componentId,
                type: demo.type,
                content: demo.content,
                styles: {
                    fontSize: '16px',
                    color: '#000000',
                    backgroundColor: '#ffffff',
                    textAlign: 'left',
                    padding: '10px'
                }
            };
            
            let componentHtml = '';
            
            switch(demo.type) {
                case 'heading':
                    componentHtml = `
                        <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                            <div class="component-controls">
                                <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                                <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                                    <i class="bi bi-grip-vertical"></i>
                                </button>
                                <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                                    <i class="bi bi-files"></i>
                                </button>
                            </div>
                            <div class="component-content">
                                <h2 class="rich-text heading-text" contenteditable="true">${demo.content}</h2>
                            </div>
                        </div>
                    `;
                    break;
                case 'paragraph':
                    componentHtml = `
                        <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                            <div class="component-controls">
                                <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                                <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                                    <i class="bi bi-grip-vertical"></i>
                                </button>
                                <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                                    <i class="bi bi-files"></i>
                                </button>
                            </div>
                            <div class="component-content">
                                <p class="rich-text paragraph-text" contenteditable="true">${demo.content}</p>
                            </div>
                        </div>
                    `;
                    break;
                case 'list':
                    componentHtml = `
                        <div class="modern-component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                            <div class="component-controls">
                                <button class="control-btn delete-btn" onclick="deleteComponent('${componentId}')" title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                                <button class="control-btn move-btn" draggable="true" onmousedown="startDrag('${componentId}')" title="Move">
                                    <i class="bi bi-grip-vertical"></i>
                                </button>
                                <button class="control-btn copy-btn" onclick="duplicateComponent('${componentId}')" title="Duplicate">
                                    <i class="bi bi-files"></i>
                                </button>
                            </div>
                            <div class="component-content">
                                <ul class="rich-text list-text" contenteditable="true">
                                    ${demo.content.split('\n').map(item => `<li>${item}</li>`).join('')}
                                </ul>
                            </div>
                        </div>
                    `;
                    break;
                case 'card':
                    componentHtml = `
                        <div class="component" data-id="${componentId}" onclick="selectComponent('${componentId}')">
                            <button class="delete-btn" onclick="deleteComponent('${componentId}')">&times;</button>
                            <button class="move-btn" draggable="true" onmousedown="startDrag('${componentId}')">⋮</button>
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title rich-text" contenteditable="true">Important Note</h5>
                                    <p class="card-text rich-text" contenteditable="true">${demo.content}</p>
                                </div>
                            </div>
                        </div>
                    `;
                    break;
            }
            
            canvas.insertAdjacentHTML('beforeend', componentHtml);
            window.siteComponents = window.siteComponents || {};
            window.siteComponents[componentId] = componentData;
            
        }, index * 200); // Stagger the additions
    });
    
    showAlert('Demo content added! Click on any element to edit it.', 'success');
}
</script>
@endpush

<!-- Summernote JS -->
<script src="{{ asset('vendor/summernote/summernote-bs5.min.js') }}"></script>

<script>
// Initialize Summernote editor
function initSummernoteEditor(element) {
    $(element).summernote({
        height: 300,
        toolbar: [
            ['style', ['style']],
            ['font', ['bold', 'underline', 'clear']],
            ['fontname', ['fontname']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video']],
            ['view', ['fullscreen', 'codeview', 'help']],
        ],
        callbacks: {
            onImageUpload: function(files) {
                uploadImageToServer(files[0], this);
            }
        }
    });
}

// Upload image to server using our existing AJAX function
function uploadImageToServer(file, editor) {
    const formData = new FormData();
    formData.append('image', file);
    formData.append('alt_text', file.name);
    formData.append('description', '');
    
    // Show loading indicator
    const loadingIndicator = $('<div class="summernote-loading">Uploading image...</div>');
    $(editor).summernote('editor.insertNode', loadingIndicator[0]);
    
    // Use XMLHttpRequest for upload
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '{{ route("admin.tc-lms.upload-image", $tcLm) }}', true);
    xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));
    
    xhr.onload = function() {
        if (xhr.status === 200) {
            try {
                const response = JSON.parse(xhr.responseText);
                if (response.success) {
                    // Remove loading indicator
                    loadingIndicator.remove();
                    
                    // Insert image
                    $(editor).summernote('editor.insertImage', response.url);
                    
                    // Reload media library in background
                    loadMediaLibrary();
                } else {
                    loadingIndicator.text('Upload failed: ' + response.message);
                    setTimeout(() => loadingIndicator.remove(), 3000);
                }
            } catch (error) {
                loadingIndicator.text('Error processing server response');
                setTimeout(() => loadingIndicator.remove(), 3000);
            }
        } else {
            loadingIndicator.text('Server error: ' + xhr.status);
            setTimeout(() => loadingIndicator.remove(), 3000);
        }
    };
    
    xhr.onerror = function() {
        loadingIndicator.text('Network error occurred');
        setTimeout(() => loadingIndicator.remove(), 3000);
    };
    
    xhr.send(formData);
}
</script>
@endsection
